#ifndef LEXER_H
#define LEXER_H

typedef enum TokenKind {
	TOKEN_EOF = 0,

	TOKEN_IDENTIFIER_VARIABLE,
	TOKEN_IDENTIFIER_FORMAL,
	TOKEN_IDENTIFIER_CONSTANT,

	TOKEN_LITERAL_INT8,
	TOKEN_LITERAL_INT16,
	TOKEN_LITERAL_INT32,
	TOKEN_LITERAL_INT64,
	TOKEN_LITERAL_UINT8,
	TOKEN_LITERAL_UINT16,
	TOKEN_LITERAL_UINT32,
	TOKEN_LITERAL_UINT64,
	TOKEN_LITERAL_FLOAT32,
	TOKEN_LITERAL_FLOAT64,
	TOKEN_LITERAL_STRING,

	TOKEN_IF,
	TOKEN_ELSE,
	TOKEN_THEN,
	TOKEN_FOR,
	TOKEN_WHILE,
	TOKEN_MATCH,
	TOKEN_BREAK,
	TOKEN_RETURN,
	TOKEN_CONTINUE,
	TOKEN_TRUE,
	TOKEN_FALSE,
	TOKEN_NULL,
	TOKEN_INC,
	TOKEN_DEC,

	TOKEN_BYTE,
	TOKEN_BOOL,
	TOKEN_INT,
	TOKEN_INT8,
	TOKEN_INT16,
	TOKEN_INT32,
	TOKEN_INT64,
	TOKEN_UINT,
	TOKEN_UINT8,
	TOKEN_UINT16,
	TOKEN_UINT32,
	TOKEN_UINT64,
	TOKEN_FLOAT32,
	TOKEN_FLOAT64,
	TOKEN_TYPE_ID,

	TOKEN_STRUCT,
	TOKEN_ENUM,

	TOKEN_OPEN_BRACE,
	TOKEN_CLOSE_BRACE,
	TOKEN_OPEN_BRACKET,
	TOKEN_CLOSE_BRACKET,
	TOKEN_OPEN_PAREN,
	TOKEN_CLOSE_PAREN,

	TOKEN_BACK_SLASH,
	TOKEN_PIKE,
	TOKEN_COLON,
	TOKEN_SEMICOLON,
	TOKEN_DOT,
	TOKEN_DOT_DOT,
	TOKEN_ARROW,
	TOKEN_COMMA,
	TOKEN_PLUS,
	TOKEN_MINUS,
	TOKEN_ASTERISK,
	TOKEN_EXCLAMATION,
	TOKEN_SLASH,
	TOKEN_PERCENT,
	TOKEN_TILDA,
	TOKEN_BACKTICK,
	TOKEN_AT,
	TOKEN_HASH,
	TOKEN_DOLLAR,
	TOKEN_CARET,
	TOKEN_AMPERSAND,
	TOKEN_QUESTION,
	TOKEN_EQUAL,
	TOKEN_AND,
	TOKEN_OR,
	TOKEN_LEFT_SHIFT,
	TOKEN_RIGHT_SHIFT,

	TOKEN_LESS,
	TOKEN_LESS_OR_EQUAL,
	TOKEN_GREATER,
	TOKEN_GREATER_OR_EQUAL,

	TOKEN_LEFT_SHIFT_EQUAL,
	TOKEN_RIGHT_SHIFT_EQUAL,
	TOKEN_NOT_EQUAL,
	TOKEN_SLASH_EQUAL,
	TOKEN_PERCENT_EQUAL,
	TOKEN_PLUS_EQUAL,
	TOKEN_MINUS_EQUAL,
	TOKEN_ASTERISK_EQUAL,
	TOKEN_AMPERSAND_EQUAL,
	TOKEN_CARET_EQUAL,
	TOKEN_TILDA_EQUAL,
	TOKEN_PIKE_EQUAL,


} TokenKind;

typedef union TokenAuxilaryInfo {
	s64 i;
	float32 f32;
	float64 f64;
	String string;
	String identifier;
} TokenAuxilaryInfo;

typedef u16 Indent16;

typedef struct Token {
	TokenKind kind;
	TypeID type;
	Indent16 indent;
	bool newline;
	bool lspace;
	bool rspace;
	TokenAuxilaryInfo aux;
} Token;

typedef struct TokenStore {
	Token* tokens;
	u64 count;
} TokenStore;

#endif // LEXER_H

